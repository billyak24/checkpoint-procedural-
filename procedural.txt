PROCEDURE dot_product(v1 : ARRAY_OF FLOAT; v2 : ARRAY_OF FLOAT; var ps : FLOAT; n: INTEGER)
VAR
    i : INTEGER; 
BEGIN
ps:=0;
FOR i FROM 0 TO n-1  DO
    ps:= ps +  v1[i]*v2[i]
END_FOR
write (ps);
END

FUNCTION dot_products(v1 : ARRAY_OF FLOAT; v2 : ARRAY_OF FLOAT; n: INTEGER) : FLOAT
VAR
    i : INTEGER;
    ps: FLOAT;
BEGIN
ps:=0;
FOR i FROM 0 TO n-1  DO
    ps:= ps +  v1[i]*v2[i]
END_FOR
     RETURN ps ;
END

ALGORITHM Dot_product_proc
VAR
    v1, v2: ARRAY_OF FLOAT[50];
    i,n : INTEGER ;
BEGIN
  read(n)
  FOR i FROM 0 TO n-1   DO
    read(v1[i])
  END_FOR
   FOR i FROM 0 TO n-1   DO
    read(v2[i])
  END_FOR
  dot_product(v1,v2,ps,n)
  IF (ps=0) THEN
    write('v1 and v2 are orthogonal' )
  ELSE
        write('v1 and v2 are not orthogonal' )
  END_IF
END


ALGORITHM Dot_product_func
VAR
    v1, v2: ARRAY_OF FLOAT[50];
    i,n : INTEGER ;
BEGIN
  read(n)
  FOR i FROM 0 TO n-1   DO
    read(v1[i])
  END_FOR
   FOR i FROM 0 TO n-1   DO
    read(v2[i])
  END_FOR
  ps:=dot_products(v1,v2,n);
  IF (ps=0) THEN
    write('v1 and v2 are orthogonal' )
  ELSE
        write('v1 and v2 are not orthogonal' )
  END_IF
END